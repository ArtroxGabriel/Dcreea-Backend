components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Game:
      type: object
      properties:
        id:
          type: string
        gdd:
          type: string
        states:
          type: [string]
      example:
        gdd: fake gdd
        states: []

    Gdd:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: must be unique
        description:
          type: string
        targetAudience:
          type: string
        knowledgeField:
          type: string
        requirements:
          type: string
        minNumberPlayers:
          type: number
        maxNumberPlayers:
          type: number
      example:
        name: fake gdd
        description: fake gdd
        targetAudience: fake gdd
        knowledgeField: fake gdd
        requirements: fake gdd
        minNumberPlayers: 3
        maxNumberPlayers: 3

    State:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
          description: must be unique
        description:
          type: string
        game:
          type: string
        statementRules:
          type: [object]
        effectRule:
          type: object
        conditionalRule:
          type: object
        transition:
          type: string
      example:
        label: fake state
        description: fake description
        game: replace me
        statementRules: null
        effectRule: null
        conditionalRule: null
        transition: null

    StatementRule:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
          description: must be unique
        simplerDescription:
          type: string
          description: required
        description:
          type: object
      example:
        label: fake state
        dessimplerDescriptioncription: fake description
        description: { me: string, to: string, given: string, when: string, then: string, otherwise: string }

    Card:
      type: object
      properties:
        id:
          type: string
        frontTitle:
          type: string
          description: max lenght 16 chars
        frontArt:
          type: string
          description: the card's art
        frontDescription:
          type: string
          description: max lenght 420 chars
        frontEffect:
          type: string
          description: max lenght 420 chars
        frontCost:
          type: number
          description: the cost to use this card
        frontLevel:
          type: number
          description: the level required to this card
        frontEarning:
          type: number
          description: the reward for beating this challenge card, when is the case
        backTitle:
          type: string
          description: max lenght 16 chars
        backAnswers:
          type: string
          description: max lenght 420 chars
        backEffect:
          type: string
          description: max lenght 420 chars
        backCost:
          type: number
          description: must match with front cost, if enabled
        backLevel:
          type: number
          description: must match with front cost, if enabled
        backEarning:
          type: number
          description: must match with front cost, if enabled
      example:
        frontTitle: card fake
        frontArt: card fake
        frontDescription: card fake
        frontEffect: card fake
        frontCost: 1
        frontLevel: 1
        frontEarning: 1
        backTitle: card fake
        backAnswers: card fake
        backEffect: card fake
        backCost: 1
        backLevel: 1
        backEarning: 1

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
